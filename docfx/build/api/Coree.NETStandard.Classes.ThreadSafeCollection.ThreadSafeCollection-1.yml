### YamlMime:ManagedReference
items:
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  commentId: T:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  id: ThreadSafeCollection`1
  parent: Coree.NETStandard.Classes.ThreadSafeCollection
  children:
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.#ctor
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Add(`0)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Any(System.Func{`0,System.Boolean})
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Clear
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Count
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Dequeue
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Enqueue(`0)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetCollectionCopyToList
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetEnumerator
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemAt(System.Int32)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemCopyAt(System.Int32)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.HasItems
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.IsEmpty
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Item(System.Int32)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeAmount
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeCount
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangePercent
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastModificationTime
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ModificationTimeDifference
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Peek
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PeekCount
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Pop
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousCount
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousModificationTime
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Push(`0)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Remove(`0)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAll(System.Func{`0,System.Boolean})
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAt(System.Int32)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAll(System.Func{`0,System.Boolean})
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAt(System.Int32)
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeFirst(System.Func{`0,System.Boolean})
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransformDeepClone``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  - Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  langs:
  - csharp
  - vb
  name: ThreadSafeCollection<T>
  nameWithType: ThreadSafeCollection<T>
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>
  type: Class
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: ThreadSafeCollection
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 17
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Represents a thread-safe collection of objects that can be accessed by multiple threads concurrently.
  remarks: >-
    This collection uses locking to ensure that its operations are thread-safe. The collection is implemented

    as a list where items can be added, removed, or retrieved in a manner that prevents race conditions

    and data corruption when accessed from multiple threads. Null values can be stored, depending on the type <code class="typeparamref">T</code>.
  example: []
  syntax:
    content: 'public class ThreadSafeCollection<T> : IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
      description: The type of elements in the collection. This type can be a class, including nullable reference types.
    content.vb: Public Class ThreadSafeCollection(Of T) Implements IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Collections.Generic.IEnumerable{`0}.Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(Coree.NETStandard.Classes.Criteria.CriteriaItems)
  - System.Collections.Generic.IEnumerable{`0}.Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(Coree.NETStandard.Classes.Criteria.CriteriaItem{{TValue}})
  nameWithType.vb: ThreadSafeCollection(Of T)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T)
  name.vb: ThreadSafeCollection(Of T)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PeekCount
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PeekCount
  id: PeekCount
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: PeekCount
  nameWithType: ThreadSafeCollection<T>.PeekCount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.PeekCount
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: PeekCount
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 35
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets the maximum number of items that have ever been in the collection.
  remarks: >-
    This property reflects the highest count of items stored in the collection at any point in time.

    Access to this property is thread-safe, ensuring the count is accurate and consistent even when the collection is modified concurrently.
  example: []
  syntax:
    content: public int PeekCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: The peak item count of the collection.
    content.vb: Public ReadOnly Property PeekCount As Integer
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PeekCount*
  nameWithType.vb: ThreadSafeCollection(Of T).PeekCount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).PeekCount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousCount
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousCount
  id: PreviousCount
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: PreviousCount
  nameWithType: ThreadSafeCollection<T>.PreviousCount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.PreviousCount
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: PreviousCount
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 55
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets the count of items in the collection just before the most recent modification.
  remarks: >-
    This property stores the number of items in the collection immediately before the last operation that added or removed items.

    It provides a snapshot of the collection's size prior to the last change, useful for understanding the state changes over time.

    Access to this property is thread-safe, ensuring that reads are consistent and not subject to partial updates.
  example: []
  syntax:
    content: public int PreviousCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: The item count of the collection before the last modification.
    content.vb: Public ReadOnly Property PreviousCount As Integer
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousCount*
  nameWithType.vb: ThreadSafeCollection(Of T).PreviousCount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).PreviousCount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeCount
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeCount
  id: LastChangeCount
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: LastChangeCount
  nameWithType: ThreadSafeCollection<T>.LastChangeCount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastChangeCount
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: LastChangeCount
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 75
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Calculates the difference in the item count since the last update.
  remarks: >-
    This property provides the net change in the collection's count following the most recent operation, whether an addition or a removal.

    The value can be negative if the collection size has decreased since the last operation.

    Access to this value is thread-safe.
  example: []
  syntax:
    content: public int LastChangeCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: The net change in the collection's size since the last modification.
    content.vb: Public ReadOnly Property LastChangeCount As Integer
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeCount*
  nameWithType.vb: ThreadSafeCollection(Of T).LastChangeCount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastChangeCount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeAmount
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeAmount
  id: LastChangeAmount
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: LastChangeAmount
  nameWithType: ThreadSafeCollection<T>.LastChangeAmount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastChangeAmount
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: LastChangeAmount
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 95
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Calculates the absolute change in count since the last update.
  remarks: >-
    This property provides the absolute change in the collection's size since the last update, regardless of whether the size increased or decreased.

    It is useful for determining the magnitude of change without regard to the direction of that change.

    Access to this property is thread-safe.
  example: []
  syntax:
    content: public int LastChangeAmount { get; }
    parameters: []
    return:
      type: System.Int32
      description: The absolute change in the collection's size since the last modification.
    content.vb: Public ReadOnly Property LastChangeAmount As Integer
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeAmount*
  nameWithType.vb: ThreadSafeCollection(Of T).LastChangeAmount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastChangeAmount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangePercent
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangePercent
  id: LastChangePercent
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: LastChangePercent
  nameWithType: ThreadSafeCollection<T>.LastChangePercent
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastChangePercent
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: LastChangePercent
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 120
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Calculates the percentage change in the count of items since the last update.
  remarks: >-
    This property returns the percentage change in the size of the collection based on the number of items before the last operation

    and the current number of items. If the previous count is zero, which means there were no items before the last operation,

    the change percentage is undefined, and thus returns -1. This helps in scenarios where a percentage change calculation would

    otherwise lead to a division by zero error.
  example: []
  syntax:
    content: public int LastChangePercent { get; }
    parameters: []
    return:
      type: System.Int32
      description: >-
        The percentage change in the collection size, always returned as a positive value to indicate the magnitude of change,

        or -1 if the change is undefined due to a zero previous count.
    content.vb: Public ReadOnly Property LastChangePercent As Integer
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangePercent*
  nameWithType.vb: ThreadSafeCollection(Of T).LastChangePercent
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastChangePercent
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastModificationTime
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastModificationTime
  id: LastModificationTime
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: LastModificationTime
  nameWithType: ThreadSafeCollection<T>.LastModificationTime
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastModificationTime
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: LastModificationTime
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 144
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets the time of the last modification to the collection.
  remarks: >-
    This property records the timestamp when the last operation (addition, removal, or update) was performed on the collection.

    Access to this property is thread-safe, ensuring the timestamp is consistent with the last modification event.
  example: []
  syntax:
    content: public DateTime LastModificationTime { get; }
    parameters: []
    return:
      type: System.DateTime
      description: The DateTime of the last update to the collection.
    content.vb: Public ReadOnly Property LastModificationTime As Date
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastModificationTime*
  nameWithType.vb: ThreadSafeCollection(Of T).LastModificationTime
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastModificationTime
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousModificationTime
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousModificationTime
  id: PreviousModificationTime
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: PreviousModificationTime
  nameWithType: ThreadSafeCollection<T>.PreviousModificationTime
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.PreviousModificationTime
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: PreviousModificationTime
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 164
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets the time of the modification prior to the last modification.
  remarks: >-
    This property records the timestamp of the modification that occurred just before the most recent one.

    It provides a historical reference for changes, useful for tracking the frequency or cadence of updates.

    Access to this property is thread-safe.
  example: []
  syntax:
    content: public DateTime PreviousModificationTime { get; }
    parameters: []
    return:
      type: System.DateTime
      description: The DateTime of the modification before the last update.
    content.vb: Public ReadOnly Property PreviousModificationTime As Date
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousModificationTime*
  nameWithType.vb: ThreadSafeCollection(Of T).PreviousModificationTime
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).PreviousModificationTime
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ModificationTimeDifference
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ModificationTimeDifference
  id: ModificationTimeDifference
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: ModificationTimeDifference
  nameWithType: ThreadSafeCollection<T>.ModificationTimeDifference
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ModificationTimeDifference
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: ModificationTimeDifference
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 184
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets the time difference between the last two modifications.
  remarks: >-
    This property calculates the duration between the most recent and the previous modifications to the collection.

    It is useful for monitoring the time intervals between collection updates, which can be critical in performance-sensitive applications.

    Access to this property is thread-safe.
  example: []
  syntax:
    content: public TimeSpan ModificationTimeDifference { get; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The TimeSpan representing the duration between the last two updates.
    content.vb: Public ReadOnly Property ModificationTimeDifference As TimeSpan
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ModificationTimeDifference*
  nameWithType.vb: ThreadSafeCollection(Of T).ModificationTimeDifference
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ModificationTimeDifference
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.#ctor
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.#ctor
  id: '#ctor'
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: ThreadSafeCollection()
  nameWithType: ThreadSafeCollection<T>.ThreadSafeCollection()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeCollection()
  type: Constructor
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: .ctor
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 202
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Initializes a new instance of the ThreadSafeCollection class that is empty.
  remarks: >-
    Creates an empty collection with no items. The collection is ready to be accessed by multiple threads

    using its thread-safe methods. It supports storing null values, if the type <code class="typeparamref">T</code> permits.
  example: []
  syntax:
    content: public ThreadSafeCollection()
    content.vb: Public Sub New()
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.#ctor*
  nameWithType.vb: ThreadSafeCollection(Of T).New()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).New()
  name.vb: New()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Push(`0)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Push(`0)
  id: Push(`0)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Push(T)
  nameWithType: ThreadSafeCollection<T>.Push(T)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Push(T)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Push
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 220
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Adds an item to the collection in a thread-safe manner.
  remarks: >-
    This method ensures that the collection can be safely modified from multiple threads by synchronizing access.

    The item is added to the end of the collection. It accepts null values for types that allow it.
  example: []
  syntax:
    content: public void Push(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to add to the collection. Can be null for nullable reference types.
    content.vb: Public Sub Push(item As T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Push*
  nameWithType.vb: ThreadSafeCollection(Of T).Push(T)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Push(T)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Pop
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Pop
  id: Pop
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Pop()
  nameWithType: ThreadSafeCollection<T>.Pop()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Pop()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Pop
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 247
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Removes and returns the last item from the collection in a thread-safe manner.
  remarks: >-
    This method locks the collection to ensure thread safety during the remove operation. If the collection is empty,

    it throws an InvalidOperationException. This change ensures that the caller is explicitly aware of the empty state.
  example: []
  syntax:
    content: public T Pop()
    return:
      type: '{T}'
      description: The last item of the collection if it exists; otherwise, throws an InvalidOperationException.
    content.vb: Public Function Pop() As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Pop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the collection is empty.
  nameWithType.vb: ThreadSafeCollection(Of T).Pop()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Pop()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Peek
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Peek
  id: Peek
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: ThreadSafeCollection<T>.Peek()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Peek()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Peek
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 277
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Returns the last item from the collection without removing it, in a thread-safe manner.
  remarks: >-
    This method locks the collection to ensure thread safety during the retrieval operation. If the collection is empty,

    it throws an InvalidOperationException to notify the caller of the empty state, aligning with the behavior of Pop.
  example: []
  syntax:
    content: public T Peek()
    return:
      type: '{T}'
      description: The last item of the collection if it exists; otherwise, throws an InvalidOperationException.
    content.vb: Public Function Peek() As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Peek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the collection is empty.
  nameWithType.vb: ThreadSafeCollection(Of T).Peek()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Peek()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Enqueue(`0)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Enqueue(T)
  nameWithType: ThreadSafeCollection<T>.Enqueue(T)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Enqueue(T)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Enqueue
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 302
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Adds an item to the end of the collection in a thread-safe manner.
  remarks: >-
    This method ensures that items can be added to the collection safely from multiple threads by synchronizing access.

    It functions as part of the thread-safe queue functionality, allowing items to be enqueued (added to the end).
  example: []
  syntax:
    content: public void Enqueue(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to add to the collection. Can be null if the type <code class="typeparamref">T</code> allows it.
    content.vb: Public Sub Enqueue(item As T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Enqueue*
  nameWithType.vb: ThreadSafeCollection(Of T).Enqueue(T)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Enqueue(T)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Dequeue
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Dequeue
  id: Dequeue
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Dequeue()
  nameWithType: ThreadSafeCollection<T>.Dequeue()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Dequeue()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Dequeue
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 330
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Removes and returns the item at the beginning of the collection in a thread-safe manner.
  remarks: >-
    This method locks the collection to ensure thread safety during the remove operation. It is part of the thread-safe queue functionality,

    providing a way to dequeue items (remove from the beginning). If the collection is empty, it throws an InvalidOperationException to

    enforce handling of the empty state condition by the caller.
  example: []
  syntax:
    content: public T Dequeue()
    return:
      type: '{T}'
      description: The item at the beginning of the collection if it exists; otherwise, throws an InvalidOperationException.
    content.vb: Public Function Dequeue() As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Dequeue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attempting to perform the Dequeue operation on an empty collection.
  nameWithType.vb: ThreadSafeCollection(Of T).Dequeue()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Dequeue()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  id: ThreadSafeTransform``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: ThreadSafeTransform<TResult>(Func<IEnumerable<T>, IEnumerable<TResult>>)
  nameWithType: ThreadSafeCollection<T>.ThreadSafeTransform<TResult>(Func<IEnumerable<T>, IEnumerable<TResult>>)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeTransform<TResult>(System.Func<System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: ThreadSafeTransform
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 367
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Performs a LINQ operation on a snapshot of the collection in a thread-safe manner.
  remarks: >-
    This method locks the collection, takes a snapshot, and then applies the specified LINQ operation.

    It ensures thread safety by preventing other operations from modifying the collection during execution.

    The operation is performed on a snapshot to avoid locking during the entire enumeration,

    but it means the operation does not reflect changes made to the collection after the snapshot is taken.
  example: []
  syntax:
    content: public IEnumerable<TResult> ThreadSafeTransform<TResult>(Func<IEnumerable<T>, IEnumerable<TResult>> operation)
    parameters:
    - id: operation
      type: System.Func{System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEnumerable{{TResult}}}
      description: A function representing the LINQ operation to be performed on the collection.
    typeParameters:
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> that contains the result of applying the LINQ operation on the collection snapshot.
    content.vb: Public Function ThreadSafeTransform(Of TResult)(operation As Func(Of IEnumerable(Of T), IEnumerable(Of TResult))) As IEnumerable(Of TResult)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform*
  nameWithType.vb: ThreadSafeCollection(Of T).ThreadSafeTransform(Of TResult)(Func(Of IEnumerable(Of T), IEnumerable(Of TResult)))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ThreadSafeTransform(Of TResult)(System.Func(Of System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: ThreadSafeTransform(Of TResult)(Func(Of IEnumerable(Of T), IEnumerable(Of TResult)))
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
  id: ThreadSafeTransform
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: ThreadSafeTransform()
  nameWithType: ThreadSafeCollection<T>.ThreadSafeTransform()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeTransform()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: ThreadSafeTransform
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 392
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Provides a thread-safe snapshot of the collection, allowing for safe read access by other operations without risk of modification during enumeration.
  remarks: This method locks the collection to prevent other operations from modifying it while the snapshot is being created, ensuring consistent data state.
  example:
  - >-
    <pre><code class="lang-csharp">var itemsSnapshot = myCollection.ThreadSafeTransform();

    foreach (var item in itemsSnapshot) {
        Console.WriteLine(item);
    }</code></pre>
  syntax:
    content: public IEnumerable<T> ThreadSafeTransform()
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A snapshot of the collection as a new list, ensuring that the original collection remains untouched during access.
    content.vb: Public Function ThreadSafeTransform() As IEnumerable(Of T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform*
  nameWithType.vb: ThreadSafeCollection(Of T).ThreadSafeTransform()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ThreadSafeTransform()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransformDeepClone``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransformDeepClone``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  id: ThreadSafeTransformDeepClone``1(System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: ThreadSafeTransformDeepClone<TResult>(Func<IEnumerable<T>, IEnumerable<TResult>>)
  nameWithType: ThreadSafeCollection<T>.ThreadSafeTransformDeepClone<TResult>(Func<IEnumerable<T>, IEnumerable<TResult>>)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeTransformDeepClone<TResult>(System.Func<System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: ThreadSafeTransformDeepClone
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 413
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Performs a LINQ operation on a snapshot of the collection and returns a deep copy of the results in a thread-safe manner.
  remarks: >-
    Similar to <xref href="Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection%601.ThreadSafeTransform" data-throw-if-not-resolved="false"></xref>, this method locks the collection and operates on a snapshot to ensure thread safety.

    After performing the specified LINQ operation, it creates a deep copy of the result using JSON serialization.

    This approach guarantees that the operation's results are completely isolated from the original items in the collection,

    providing additional safety against mutations.
  example: []
  syntax:
    content: public IEnumerable<TResult> ThreadSafeTransformDeepClone<TResult>(Func<IEnumerable<T>, IEnumerable<TResult>> operation)
    parameters:
    - id: operation
      type: System.Func{System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEnumerable{{TResult}}}
      description: A function representing the LINQ operation to be performed on the collection.
    typeParameters:
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> that contains a deep copy of the result of applying the LINQ operation on the collection snapshot.
    content.vb: Public Function ThreadSafeTransformDeepClone(Of TResult)(operation As Func(Of IEnumerable(Of T), IEnumerable(Of TResult))) As IEnumerable(Of TResult)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransformDeepClone*
  nameWithType.vb: ThreadSafeCollection(Of T).ThreadSafeTransformDeepClone(Of TResult)(Func(Of IEnumerable(Of T), IEnumerable(Of TResult)))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ThreadSafeTransformDeepClone(Of TResult)(System.Func(Of System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: ThreadSafeTransformDeepClone(Of TResult)(Func(Of IEnumerable(Of T), IEnumerable(Of TResult)))
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetEnumerator
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetEnumerator
  id: GetEnumerator
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ThreadSafeCollection<T>.GetEnumerator()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: GetEnumerator
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 436
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Returns an enumerator that iterates through the collection in a thread-safe manner.
  remarks: >-
    This method creates a snapshot of the current state of the collection and returns an enumerator for this snapshot,

    allowing for safe iteration over the collection items even when other threads might be modifying the collection concurrently.

    Note that the snapshot is a shallow copy; thus, the enumeration reflects the collection's state at the moment of the snapshot's creation.
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An IEnumerator&lt;T&gt; that can be used to iterate through the collection.
    content.vb: Public Function GetEnumerator() As IEnumerator(Of T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ThreadSafeCollection(Of T).GetEnumerator()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetEnumerator()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAt(System.Int32)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAt(System.Int32)
  id: TakeAt(System.Int32)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: TakeAt(int)
  nameWithType: ThreadSafeCollection<T>.TakeAt(int)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.TakeAt(int)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: TakeAt
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 476
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets and removes the item at the specified index from the collection in a thread-safe manner.
  remarks: >-
    Synchronizes access to the collection to safely remove the item, supporting concurrent modifications.

    If the index is out of range, an <xref href="System.ArgumentOutOfRangeException" data-throw-if-not-resolved="false"></xref> is thrown.
  example: []
  syntax:
    content: public T TakeAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to fetch and remove.
    return:
      type: '{T}'
      description: The item that was removed from the collection.
    content.vb: Public Function TakeAt(index As Integer) As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the index is out of range.
  nameWithType.vb: ThreadSafeCollection(Of T).TakeAt(Integer)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).TakeAt(Integer)
  name.vb: TakeAt(Integer)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeFirst(System.Func{`0,System.Boolean})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeFirst(System.Func{`0,System.Boolean})
  id: TakeFirst(System.Func{`0,System.Boolean})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: TakeFirst(Func<T, bool>)
  nameWithType: ThreadSafeCollection<T>.TakeFirst(Func<T, bool>)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.TakeFirst(System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: TakeFirst
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 506
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Finds and removes the first item matching the given predicate from the collection in a thread-safe manner.
  remarks: >-
    Synchronizes access to the collection to safely remove the item, supporting concurrent modifications.

    If no item matches the predicate, <code>null</code> is returned.
  example: []
  syntax:
    content: public T? TakeFirst(Func<T, bool> predicate)
    parameters:
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The predicate used to find the item to remove.
    return:
      type: '{T}'
      description: The item that was removed from the collection, or <code>null</code> if no item matched the predicate.
    content.vb: Public Function TakeFirst(predicate As Func(Of T, Boolean)) As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeFirst*
  nameWithType.vb: ThreadSafeCollection(Of T).TakeFirst(Func(Of T, Boolean))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).TakeFirst(System.Func(Of T, Boolean))
  name.vb: TakeFirst(Func(Of T, Boolean))
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAll(System.Func{`0,System.Boolean})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAll(System.Func{`0,System.Boolean})
  id: TakeAll(System.Func{`0,System.Boolean})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: TakeAll(Func<T, bool>)
  nameWithType: ThreadSafeCollection<T>.TakeAll(Func<T, bool>)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.TakeAll(System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: TakeAll
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 537
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Finds and removes all items matching the given predicate from the collection in a thread-safe manner.
  remarks: >-
    Synchronizes access to the collection to safely remove the items, supporting concurrent modifications.

    Returns an empty enumerable if no items match the predicate.
  example: []
  syntax:
    content: public IEnumerable<T> TakeAll(Func<T, bool> predicate)
    parameters:
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: The predicate used to find the items to remove.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An enumerable of all items that were removed from the collection.
    content.vb: Public Function TakeAll(predicate As Func(Of T, Boolean)) As IEnumerable(Of T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAll*
  nameWithType.vb: ThreadSafeCollection(Of T).TakeAll(Func(Of T, Boolean))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).TakeAll(System.Func(Of T, Boolean))
  name.vb: TakeAll(Func(Of T, Boolean))
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAll(System.Func{`0,System.Boolean})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAll(System.Func{`0,System.Boolean})
  id: RemoveAll(System.Func{`0,System.Boolean})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: RemoveAll(Func<T, bool>)
  nameWithType: ThreadSafeCollection<T>.RemoveAll(Func<T, bool>)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.RemoveAll(System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: RemoveAll
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 564
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Removes all items from the collection that match the specified predicate in a thread-safe manner.
  remarks: >-
    This method locks the collection to ensure that no other operations modify it concurrently while it is being updated.

    It's particularly useful for batch removal of items based on specific conditions. The actual removal is performed

    efficiently in a single pass through the collection.
  example: []
  syntax:
    content: public void RemoveAll(Func<T, bool> predicate)
    parameters:
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: A delegate that defines the conditions of the elements to remove from the collection.
    content.vb: Public Sub RemoveAll(predicate As Func(Of T, Boolean))
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAll*
  nameWithType.vb: ThreadSafeCollection(Of T).RemoveAll(Func(Of T, Boolean))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).RemoveAll(System.Func(Of T, Boolean))
  name.vb: RemoveAll(Func(Of T, Boolean))
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Add(`0)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Add(`0)
  id: Add(`0)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ThreadSafeCollection<T>.Add(T)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Add
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 584
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Adds an item to the collection in a thread-safe manner.
  remarks: Synchronizes access to the collection to safely add the item, supporting concurrent modifications.
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection. Can be null if the type <code class="typeparamref">T</code> permits.
    content.vb: Public Sub Add(item As T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Add*
  nameWithType.vb: ThreadSafeCollection(Of T).Add(T)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Add(T)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  nameWithType: ThreadSafeCollection<T>.AddRange(IEnumerable<T>)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: AddRange
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 609
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Adds items to the collection in a thread-safe manner.
  remarks: Synchronizes access to the collection to safely add the item, supporting concurrent modifications.
  example: []
  syntax:
    content: public void AddRange(IEnumerable<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The items to be added to the collection. Can be null if the type <code class="typeparamref">T</code> permits.
    content.vb: Public Sub AddRange(items As IEnumerable(Of T))
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.AddRange*
  nameWithType.vb: ThreadSafeCollection(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Remove(`0)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Remove(`0)
  id: Remove(`0)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ThreadSafeCollection<T>.Remove(T)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Remove
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 635
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Removes the first occurrence of a specific item from the collection in a thread-safe manner.
  remarks: >-
    Synchronizes access to the collection to safely remove the item, supporting concurrent modifications.

    If the item is not found, no action is taken.
  example: []
  syntax:
    content: public void Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to remove from the collection. Can be null if the type <code class="typeparamref">T</code> permits.
    content.vb: Public Sub Remove(item As T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Remove*
  nameWithType.vb: ThreadSafeCollection(Of T).Remove(T)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Remove(T)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAt(System.Int32)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: RemoveAt(int)
  nameWithType: ThreadSafeCollection<T>.RemoveAt(int)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.RemoveAt(int)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: RemoveAt
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 658
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Removes the item at the specified index from the collection in a thread-safe manner.
  remarks: >-
    This method locks the collection to ensure exclusive access during the removal operation. It captures the state before the change

    and updates internal timestamps to reflect the modification time. An ArgumentOutOfRangeException is thrown if the index is

    outside the valid range of the collection's indices. This method updates the previous and last modification times to track changes.
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the index is less than 0 or equal to or greater than the number of items in the collection.
  nameWithType.vb: ThreadSafeCollection(Of T).RemoveAt(Integer)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemAt(System.Int32)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemAt(System.Int32)
  id: GetItemAt(System.Int32)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: GetItemAt(int)
  nameWithType: ThreadSafeCollection<T>.GetItemAt(int)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetItemAt(int)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: GetItemAt
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 688
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Retrieves the item at the specified index in a thread-safe manner.
  remarks: Accesses the collection in a synchronized context to ensure safe retrieval of the item.
  example: []
  syntax:
    content: public T GetItemAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to retrieve.
    return:
      type: '{T}'
      description: The item at the specified index. Can be null if the item itself is null or if the type <code class="typeparamref">T</code> allows null values.
    content.vb: Public Function GetItemAt(index As Integer) As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the specified index is outside the bounds of the collection.
  nameWithType.vb: ThreadSafeCollection(Of T).GetItemAt(Integer)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetItemAt(Integer)
  name.vb: GetItemAt(Integer)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemCopyAt(System.Int32)
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemCopyAt(System.Int32)
  id: GetItemCopyAt(System.Int32)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: GetItemCopyAt(int)
  nameWithType: ThreadSafeCollection<T>.GetItemCopyAt(int)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetItemCopyAt(int)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: GetItemCopyAt
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 711
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Returns a deep copy of the item at the specified index, ensuring thread safety and isolation from the original collection.
  remarks: >-
    This method locks the collection during the operation and uses JSON serialization to create a deep copy of the item,

    ensuring that modifications to the returned object do not affect the original item in the collection.

    Throws <xref href="System.ArgumentOutOfRangeException" data-throw-if-not-resolved="false"></xref> if the index is out of the valid range.
  example: []
  syntax:
    content: public T? GetItemCopyAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to copy.
    return:
      type: '{T}'
      description: A deep copy of the item at the specified index. Returns null if the original item is null.
    content.vb: Public Function GetItemCopyAt(index As Integer) As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemCopyAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the index is out of range.
  nameWithType.vb: ThreadSafeCollection(Of T).GetItemCopyAt(Integer)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetItemCopyAt(Integer)
  name.vb: GetItemCopyAt(Integer)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetCollectionCopyToList
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetCollectionCopyToList
  id: GetCollectionCopyToList
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: GetCollectionCopyToList()
  nameWithType: ThreadSafeCollection<T>.GetCollectionCopyToList()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetCollectionCopyToList()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: GetCollectionCopyToList
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 733
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Creates and returns a deep copy of the entire collection as a List of T.
  remarks: >-
    Locks the collection to ensure thread safety during the copy process. This method uses JSON serialization to create

    deep copies of the items, providing isolation from the original items. Modifications to the returned list or its items

    will not affect the original collection.
  example: []
  syntax:
    content: public List<T> GetCollectionCopyToList()
    return:
      type: System.Collections.Generic.List{{T}}
      description: A new List containing deep copies of the items in the collection. Returns an empty list if the collection is empty.
    content.vb: Public Function GetCollectionCopyToList() As List(Of T)
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetCollectionCopyToList*
  nameWithType.vb: ThreadSafeCollection(Of T).GetCollectionCopyToList()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetCollectionCopyToList()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Count
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Count
  id: Count
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ThreadSafeCollection<T>.Count
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Count
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Count
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 750
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets the number of items in the collection, ensuring thread safety.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of items currently in the collection. Access is synchronized to prevent race conditions.
    content.vb: Public ReadOnly Property Count As Integer
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Count*
  nameWithType.vb: ThreadSafeCollection(Of T).Count
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Count
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Item(System.Int32)
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: ThreadSafeCollection<T>.this[int]
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.this[int]
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: this[]
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 770
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets or sets the item at the specified index in a thread-safe manner.
  remarks: Access to the item is synchronized to ensure thread safety. Setting an item acquires a lock to prevent race conditions.
  example: []
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to get or set.
    return:
      type: '{T}'
      description: The item at the specified index.
    content.vb: Public Default Property this[](index As Integer) As T
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the index is outside the bounds of the collection.
  nameWithType.vb: ThreadSafeCollection(Of T).this[](Integer)
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).this[](Integer)
  name.vb: this[](Integer)
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.IsEmpty
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.IsEmpty
  id: IsEmpty
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: ThreadSafeCollection<T>.IsEmpty
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.IsEmpty
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: IsEmpty
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 799
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets a value indicating whether the collection has no items, ensuring thread safety.
  remarks: >-
    This property locks the collection to ensure that the check is performed in a thread-safe manner,

    preventing race conditions that could arise from concurrent modifications to the collection.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the collection contains no items; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.IsEmpty*
  nameWithType.vb: ThreadSafeCollection(Of T).IsEmpty
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).IsEmpty
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.HasItems
  commentId: P:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.HasItems
  id: HasItems
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: HasItems
  nameWithType: ThreadSafeCollection<T>.HasItems
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.HasItems
  type: Property
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: HasItems
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 820
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Gets a value indicating whether the collection has  items, ensuring thread safety.
  remarks: >-
    This property locks the collection to ensure that the check is performed in a thread-safe manner,

    preventing race conditions that could arise from concurrent modifications to the collection.
  example: []
  syntax:
    content: public bool HasItems { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the collection has items; otherwise, <code>false</code>.
    content.vb: Public ReadOnly Property HasItems As Boolean
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.HasItems*
  nameWithType.vb: ThreadSafeCollection(Of T).HasItems
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).HasItems
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Clear
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Clear
  id: Clear
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ThreadSafeCollection<T>.Clear()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Clear
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 837
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Removes all items from the collection in a thread-safe manner.
  remarks: This method locks the collection to ensure that no other operations can modify it concurrently during the clearing process.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Clear*
  nameWithType.vb: ThreadSafeCollection(Of T).Clear()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Clear()
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Any(System.Func{`0,System.Boolean})
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Any(System.Func{`0,System.Boolean})
  id: Any(System.Func{`0,System.Boolean})
  parent: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1
  langs:
  - csharp
  - vb
  name: Any(Func<T, bool>?)
  nameWithType: ThreadSafeCollection<T>.Any(Func<T, bool>?)
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Any(System.Func<T, bool>?)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: Any
    path: ../../src/Projects/Coree.NETStandard/Classes/ThreadSafeCollection/ThreadSafeCollection.cs
    startLine: 859
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.Classes.ThreadSafeCollection
  summary: Determines whether the collection contains any elements or any elements that match a predicate, if one is provided, in a thread-safe manner.
  remarks: >-
    This method locks the collection to ensure thread safety during the evaluation.

    If no predicate is provided, it simply checks if the collection has any elements.
  example: []
  syntax:
    content: public bool Any(Func<T, bool>? predicate = null)
    parameters:
    - id: predicate
      type: System.Func{{T},System.Boolean}
      description: An optional predicate to test each element for a condition.
    return:
      type: System.Boolean
      description: true if the collection contains any elements or any elements that satisfy the condition; otherwise, false.
    content.vb: Public Function Any(predicate As Func(Of T, Boolean) = Nothing) As Boolean
  overload: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Any*
  nameWithType.vb: ThreadSafeCollection(Of T).Any(Func(Of T, Boolean))
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Any(System.Func(Of T, Boolean))
  name.vb: Any(Func(Of T, Boolean))
references:
- uid: Coree.NETStandard.Classes.ThreadSafeCollection
  commentId: N:Coree.NETStandard.Classes.ThreadSafeCollection
  href: Coree.html
  name: Coree.NETStandard.Classes.ThreadSafeCollection
  nameWithType: Coree.NETStandard.Classes.ThreadSafeCollection
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection
  spec.csharp:
  - uid: Coree
    name: Coree
    href: Coree.html
  - name: .
  - uid: Coree.NETStandard
    name: NETStandard
    href: Coree.NETStandard.html
  - name: .
  - uid: Coree.NETStandard.Classes
    name: Classes
    href: Coree.NETStandard.Classes.html
  - name: .
  - uid: Coree.NETStandard.Classes.ThreadSafeCollection
    name: ThreadSafeCollection
    href: Coree.NETStandard.Classes.ThreadSafeCollection.html
  spec.vb:
  - uid: Coree
    name: Coree
    href: Coree.html
  - name: .
  - uid: Coree.NETStandard
    name: NETStandard
    href: Coree.NETStandard.html
  - name: .
  - uid: Coree.NETStandard.Classes
    name: Classes
    href: Coree.NETStandard.Classes.html
  - name: .
  - uid: Coree.NETStandard.Classes.ThreadSafeCollection
    name: ThreadSafeCollection
    href: Coree.NETStandard.Classes.ThreadSafeCollection.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{`0}.Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(Coree.NETStandard.Classes.Criteria.CriteriaItems)
  commentId: M:Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
  parent: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions
  definition: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
  href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__1_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItems_
  name: ApplyCriteria<T>(IEnumerable<T>, CriteriaItems)
  nameWithType: CriteriaEnumerableExtensions.ApplyCriteria<T>(IEnumerable<T>, CriteriaItems)
  fullName: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria<T>(System.Collections.Generic.IEnumerable<T>, Coree.NETStandard.Classes.Criteria.CriteriaItems)
  nameWithType.vb: CriteriaEnumerableExtensions.ApplyCriteria(Of T)(IEnumerable(Of T), CriteriaItems)
  fullName.vb: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria(Of T)(System.Collections.Generic.IEnumerable(Of T), Coree.NETStandard.Classes.Criteria.CriteriaItems)
  name.vb: ApplyCriteria(Of T)(IEnumerable(Of T), CriteriaItems)
  spec.csharp:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{`0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__1_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItems_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItems
    name: CriteriaItems
    href: Coree.NETStandard.Classes.Criteria.CriteriaItems.html
  - name: )
  spec.vb:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{`0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__1_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItems_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItems
    name: CriteriaItems
    href: Coree.NETStandard.Classes.Criteria.CriteriaItems.html
  - name: )
- uid: System.Collections.Generic.IEnumerable{`0}.Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(Coree.NETStandard.Classes.Criteria.CriteriaItem{{TValue}})
  commentId: M:Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
  parent: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions
  definition: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
  href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__2_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItem___1__
  name: ApplyCriteria<T, TValue>(IEnumerable<T>, CriteriaItem<TValue>)
  nameWithType: CriteriaEnumerableExtensions.ApplyCriteria<T, TValue>(IEnumerable<T>, CriteriaItem<TValue>)
  fullName: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria<T, TValue>(System.Collections.Generic.IEnumerable<T>, Coree.NETStandard.Classes.Criteria.CriteriaItem<TValue>)
  nameWithType.vb: CriteriaEnumerableExtensions.ApplyCriteria(Of T, TValue)(IEnumerable(Of T), CriteriaItem(Of TValue))
  fullName.vb: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria(Of T, TValue)(System.Collections.Generic.IEnumerable(Of T), Coree.NETStandard.Classes.Criteria.CriteriaItem(Of TValue))
  name.vb: ApplyCriteria(Of T, TValue)(IEnumerable(Of T), CriteriaItem(Of TValue))
  spec.csharp:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{`0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__2_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItem___1__
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItem`1
    name: CriteriaItem
    href: Coree.NETStandard.Classes.Criteria.CriteriaItem-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{`0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__2_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItem___1__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItem`1
    name: CriteriaItem
    href: Coree.NETStandard.Classes.Criteria.CriteriaItem-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
  commentId: M:Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
  isExternal: true
  href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__1_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItems_
  name: ApplyCriteria<T>(IEnumerable<T>, CriteriaItems)
  nameWithType: CriteriaEnumerableExtensions.ApplyCriteria<T>(IEnumerable<T>, CriteriaItems)
  fullName: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria<T>(System.Collections.Generic.IEnumerable<T>, Coree.NETStandard.Classes.Criteria.CriteriaItems)
  nameWithType.vb: CriteriaEnumerableExtensions.ApplyCriteria(Of T)(IEnumerable(Of T), CriteriaItems)
  fullName.vb: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria(Of T)(System.Collections.Generic.IEnumerable(Of T), Coree.NETStandard.Classes.Criteria.CriteriaItems)
  name.vb: ApplyCriteria(Of T)(IEnumerable(Of T), CriteriaItems)
  spec.csharp:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__1_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItems_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItems
    name: CriteriaItems
    href: Coree.NETStandard.Classes.Criteria.CriteriaItems.html
  - name: )
  spec.vb:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``1(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItems)
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__1_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItems_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItems
    name: CriteriaItems
    href: Coree.NETStandard.Classes.Criteria.CriteriaItems.html
  - name: )
- uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions
  commentId: T:Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions
  parent: Coree.NETStandard.Classes.Criteria
  href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html
  name: CriteriaEnumerableExtensions
  nameWithType: CriteriaEnumerableExtensions
  fullName: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions
- uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
  commentId: M:Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
  isExternal: true
  href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__2_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItem___1__
  name: ApplyCriteria<T, TValue>(IEnumerable<T>, CriteriaItem<TValue>)
  nameWithType: CriteriaEnumerableExtensions.ApplyCriteria<T, TValue>(IEnumerable<T>, CriteriaItem<TValue>)
  fullName: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria<T, TValue>(System.Collections.Generic.IEnumerable<T>, Coree.NETStandard.Classes.Criteria.CriteriaItem<TValue>)
  nameWithType.vb: CriteriaEnumerableExtensions.ApplyCriteria(Of T, TValue)(IEnumerable(Of T), CriteriaItem(Of TValue))
  fullName.vb: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria(Of T, TValue)(System.Collections.Generic.IEnumerable(Of T), Coree.NETStandard.Classes.Criteria.CriteriaItem(Of TValue))
  name.vb: ApplyCriteria(Of T, TValue)(IEnumerable(Of T), CriteriaItem(Of TValue))
  spec.csharp:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__2_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItem___1__
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItem`1
    name: CriteriaItem
    href: Coree.NETStandard.Classes.Criteria.CriteriaItem-1.html
  - name: <
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.ApplyCriteria``2(System.Collections.Generic.IEnumerable{``0},Coree.NETStandard.Classes.Criteria.CriteriaItem{``1})
    name: ApplyCriteria
    href: Coree.NETStandard.Classes.Criteria.CriteriaEnumerableExtensions.html#Coree_NETStandard_Classes_Criteria_CriteriaEnumerableExtensions_ApplyCriteria__2_System_Collections_Generic_IEnumerable___0__Coree_NETStandard_Classes_Criteria_CriteriaItem___1__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: Coree.NETStandard.Classes.Criteria.CriteriaItem`1
    name: CriteriaItem
    href: Coree.NETStandard.Classes.Criteria.CriteriaItem-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: Coree.NETStandard.Classes.Criteria
  commentId: N:Coree.NETStandard.Classes.Criteria
  href: Coree.html
  name: Coree.NETStandard.Classes.Criteria
  nameWithType: Coree.NETStandard.Classes.Criteria
  fullName: Coree.NETStandard.Classes.Criteria
  spec.csharp:
  - uid: Coree
    name: Coree
    href: Coree.html
  - name: .
  - uid: Coree.NETStandard
    name: NETStandard
    href: Coree.NETStandard.html
  - name: .
  - uid: Coree.NETStandard.Classes
    name: Classes
    href: Coree.NETStandard.Classes.html
  - name: .
  - uid: Coree.NETStandard.Classes.Criteria
    name: Criteria
    href: Coree.NETStandard.Classes.Criteria.html
  spec.vb:
  - uid: Coree
    name: Coree
    href: Coree.html
  - name: .
  - uid: Coree.NETStandard
    name: NETStandard
    href: Coree.NETStandard.html
  - name: .
  - uid: Coree.NETStandard.Classes
    name: Classes
    href: Coree.NETStandard.Classes.html
  - name: .
  - uid: Coree.NETStandard.Classes.Criteria
    name: Criteria
    href: Coree.NETStandard.Classes.Criteria.html
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PeekCount*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PeekCount
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_PeekCount
  name: PeekCount
  nameWithType: ThreadSafeCollection<T>.PeekCount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.PeekCount
  nameWithType.vb: ThreadSafeCollection(Of T).PeekCount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).PeekCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousCount*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousCount
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_PreviousCount
  name: PreviousCount
  nameWithType: ThreadSafeCollection<T>.PreviousCount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.PreviousCount
  nameWithType.vb: ThreadSafeCollection(Of T).PreviousCount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).PreviousCount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeCount*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeCount
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_LastChangeCount
  name: LastChangeCount
  nameWithType: ThreadSafeCollection<T>.LastChangeCount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastChangeCount
  nameWithType.vb: ThreadSafeCollection(Of T).LastChangeCount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastChangeCount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeAmount*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangeAmount
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_LastChangeAmount
  name: LastChangeAmount
  nameWithType: ThreadSafeCollection<T>.LastChangeAmount
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastChangeAmount
  nameWithType.vb: ThreadSafeCollection(Of T).LastChangeAmount
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastChangeAmount
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangePercent*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastChangePercent
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_LastChangePercent
  name: LastChangePercent
  nameWithType: ThreadSafeCollection<T>.LastChangePercent
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastChangePercent
  nameWithType.vb: ThreadSafeCollection(Of T).LastChangePercent
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastChangePercent
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastModificationTime*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.LastModificationTime
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_LastModificationTime
  name: LastModificationTime
  nameWithType: ThreadSafeCollection<T>.LastModificationTime
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.LastModificationTime
  nameWithType.vb: ThreadSafeCollection(Of T).LastModificationTime
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).LastModificationTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousModificationTime*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.PreviousModificationTime
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_PreviousModificationTime
  name: PreviousModificationTime
  nameWithType: ThreadSafeCollection<T>.PreviousModificationTime
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.PreviousModificationTime
  nameWithType.vb: ThreadSafeCollection(Of T).PreviousModificationTime
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).PreviousModificationTime
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ModificationTimeDifference*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ModificationTimeDifference
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_ModificationTimeDifference
  name: ModificationTimeDifference
  nameWithType: ThreadSafeCollection<T>.ModificationTimeDifference
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ModificationTimeDifference
  nameWithType.vb: ThreadSafeCollection(Of T).ModificationTimeDifference
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ModificationTimeDifference
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.#ctor*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.#ctor
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1__ctor
  name: ThreadSafeCollection
  nameWithType: ThreadSafeCollection<T>.ThreadSafeCollection
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeCollection
  nameWithType.vb: ThreadSafeCollection(Of T).New
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).New
  name.vb: New
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Push*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Push
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Push__0_
  name: Push
  nameWithType: ThreadSafeCollection<T>.Push
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Push
  nameWithType.vb: ThreadSafeCollection(Of T).Push
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Push
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Pop*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Pop
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Pop
  name: Pop
  nameWithType: ThreadSafeCollection<T>.Pop
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Pop
  nameWithType.vb: ThreadSafeCollection(Of T).Pop
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Pop
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Peek*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Peek
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Peek
  name: Peek
  nameWithType: ThreadSafeCollection<T>.Peek
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Peek
  nameWithType.vb: ThreadSafeCollection(Of T).Peek
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Peek
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Enqueue*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Enqueue
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Enqueue__0_
  name: Enqueue
  nameWithType: ThreadSafeCollection<T>.Enqueue
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Enqueue
  nameWithType.vb: ThreadSafeCollection(Of T).Enqueue
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Enqueue
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Dequeue*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Dequeue
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Dequeue
  name: Dequeue
  nameWithType: ThreadSafeCollection<T>.Dequeue
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Dequeue
  nameWithType.vb: ThreadSafeCollection(Of T).Dequeue
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Dequeue
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_ThreadSafeTransform__1_System_Func_System_Collections_Generic_IEnumerable__0__System_Collections_Generic_IEnumerable___0___
  name: ThreadSafeTransform
  nameWithType: ThreadSafeCollection<T>.ThreadSafeTransform
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeTransform
  nameWithType.vb: ThreadSafeCollection(Of T).ThreadSafeTransform
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ThreadSafeTransform
- uid: System.Func{System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<IEnumerable<T>, IEnumerable<TResult>>
  nameWithType: Func<IEnumerable<T>, IEnumerable<TResult>>
  fullName: System.Func<System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Func(Of IEnumerable(Of T), IEnumerable(Of TResult))
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of IEnumerable(Of T), IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
  commentId: M:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_ThreadSafeTransform
  name: ThreadSafeTransform()
  nameWithType: ThreadSafeCollection<T>.ThreadSafeTransform()
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeTransform()
  nameWithType.vb: ThreadSafeCollection(Of T).ThreadSafeTransform()
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ThreadSafeTransform()
  spec.csharp:
  - uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
    name: ThreadSafeTransform
    href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_ThreadSafeTransform
  - name: (
  - name: )
  spec.vb:
  - uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransform
    name: ThreadSafeTransform
    href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_ThreadSafeTransform
  - name: (
  - name: )
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransformDeepClone*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.ThreadSafeTransformDeepClone
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_ThreadSafeTransformDeepClone__1_System_Func_System_Collections_Generic_IEnumerable__0__System_Collections_Generic_IEnumerable___0___
  name: ThreadSafeTransformDeepClone
  nameWithType: ThreadSafeCollection<T>.ThreadSafeTransformDeepClone
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.ThreadSafeTransformDeepClone
  nameWithType.vb: ThreadSafeCollection(Of T).ThreadSafeTransformDeepClone
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).ThreadSafeTransformDeepClone
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetEnumerator*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetEnumerator
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_GetEnumerator
  name: GetEnumerator
  nameWithType: ThreadSafeCollection<T>.GetEnumerator
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetEnumerator
  nameWithType.vb: ThreadSafeCollection(Of T).GetEnumerator
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAt*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAt
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_TakeAt_System_Int32_
  name: TakeAt
  nameWithType: ThreadSafeCollection<T>.TakeAt
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.TakeAt
  nameWithType.vb: ThreadSafeCollection(Of T).TakeAt
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).TakeAt
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeFirst*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeFirst
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_TakeFirst_System_Func__0_System_Boolean__
  name: TakeFirst
  nameWithType: ThreadSafeCollection<T>.TakeFirst
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.TakeFirst
  nameWithType.vb: ThreadSafeCollection(Of T).TakeFirst
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).TakeFirst
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAll*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.TakeAll
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_TakeAll_System_Func__0_System_Boolean__
  name: TakeAll
  nameWithType: ThreadSafeCollection<T>.TakeAll
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.TakeAll
  nameWithType.vb: ThreadSafeCollection(Of T).TakeAll
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).TakeAll
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAll*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAll
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_RemoveAll_System_Func__0_System_Boolean__
  name: RemoveAll
  nameWithType: ThreadSafeCollection<T>.RemoveAll
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.RemoveAll
  nameWithType.vb: ThreadSafeCollection(Of T).RemoveAll
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).RemoveAll
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Add*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Add
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Add__0_
  name: Add
  nameWithType: ThreadSafeCollection<T>.Add
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Add
  nameWithType.vb: ThreadSafeCollection(Of T).Add
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Add
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.AddRange*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.AddRange
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_AddRange_System_Collections_Generic_IEnumerable__0__
  name: AddRange
  nameWithType: ThreadSafeCollection<T>.AddRange
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.AddRange
  nameWithType.vb: ThreadSafeCollection(Of T).AddRange
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).AddRange
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Remove*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Remove
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Remove__0_
  name: Remove
  nameWithType: ThreadSafeCollection<T>.Remove
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Remove
  nameWithType.vb: ThreadSafeCollection(Of T).Remove
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Remove
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAt*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.RemoveAt
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_RemoveAt_System_Int32_
  name: RemoveAt
  nameWithType: ThreadSafeCollection<T>.RemoveAt
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.RemoveAt
  nameWithType.vb: ThreadSafeCollection(Of T).RemoveAt
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).RemoveAt
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemAt*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemAt
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_GetItemAt_System_Int32_
  name: GetItemAt
  nameWithType: ThreadSafeCollection<T>.GetItemAt
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetItemAt
  nameWithType.vb: ThreadSafeCollection(Of T).GetItemAt
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetItemAt
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemCopyAt*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetItemCopyAt
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_GetItemCopyAt_System_Int32_
  name: GetItemCopyAt
  nameWithType: ThreadSafeCollection<T>.GetItemCopyAt
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetItemCopyAt
  nameWithType.vb: ThreadSafeCollection(Of T).GetItemCopyAt
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetItemCopyAt
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetCollectionCopyToList*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.GetCollectionCopyToList
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_GetCollectionCopyToList
  name: GetCollectionCopyToList
  nameWithType: ThreadSafeCollection<T>.GetCollectionCopyToList
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.GetCollectionCopyToList
  nameWithType.vb: ThreadSafeCollection(Of T).GetCollectionCopyToList
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).GetCollectionCopyToList
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Count*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Count
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Count
  name: Count
  nameWithType: ThreadSafeCollection<T>.Count
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Count
  nameWithType.vb: ThreadSafeCollection(Of T).Count
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Count
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Item*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Item
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Item_System_Int32_
  name: this
  nameWithType: ThreadSafeCollection<T>.this
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.this
  nameWithType.vb: ThreadSafeCollection(Of T).this[]
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).this[]
  name.vb: this[]
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.IsEmpty*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.IsEmpty
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_IsEmpty
  name: IsEmpty
  nameWithType: ThreadSafeCollection<T>.IsEmpty
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.IsEmpty
  nameWithType.vb: ThreadSafeCollection(Of T).IsEmpty
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.HasItems*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.HasItems
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_HasItems
  name: HasItems
  nameWithType: ThreadSafeCollection<T>.HasItems
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.HasItems
  nameWithType.vb: ThreadSafeCollection(Of T).HasItems
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).HasItems
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Clear*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Clear
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Clear
  name: Clear
  nameWithType: ThreadSafeCollection<T>.Clear
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Clear
  nameWithType.vb: ThreadSafeCollection(Of T).Clear
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Clear
- uid: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Any*
  commentId: Overload:Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection`1.Any
  href: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection-1.html#Coree_NETStandard_Classes_ThreadSafeCollection_ThreadSafeCollection_1_Any_System_Func__0_System_Boolean__
  name: Any
  nameWithType: ThreadSafeCollection<T>.Any
  fullName: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection<T>.Any
  nameWithType.vb: ThreadSafeCollection(Of T).Any
  fullName.vb: Coree.NETStandard.Classes.ThreadSafeCollection.ThreadSafeCollection(Of T).Any
