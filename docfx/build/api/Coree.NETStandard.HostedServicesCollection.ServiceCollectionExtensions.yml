### YamlMime:ManagedReference
items:
- uid: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions
  commentId: T:Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: Coree.NETStandard.HostedServicesCollection
  children:
  - Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)
  - Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{``1})
  - Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``1[])
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: ServiceCollectionExtensions
    path: ../../src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
    startLine: 13
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.HostedServicesCollection
  summary: >-
    Provides extension methods for <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to facilitate the registration

    of hosted services with specific configurations.
  example: []
  syntax:
    content: public static class ServiceCollectionExtensions
    content.vb: Public Module ServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{``1})
  commentId: M:Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{``1})
  id: AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{``1})
  isExtensionMethod: true
  parent: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddHostedServicesCollection<T, K>(IServiceCollection, List<K>)
  nameWithType: ServiceCollectionExtensions.AddHostedServicesCollection<T, K>(IServiceCollection, List<K>)
  fullName: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection<T, K>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.List<K>)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: AddHostedServicesCollection
    path: ../../src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
    startLine: 65
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.HostedServicesCollection
  summary: >-
    Registers a collection of hosted services of type <code class="typeparamref">T</code>

    with their configurations specified in a list of <code class="typeparamref">K</code>.
  remarks: >-
    <pre><code class="lang-csharp">services.AddHostedServicesCollection&lt;MyBackgroundSrv, MyBackgroundSrvConfig&gt;(new List&lt;MyBackgroundSrvConfig&gt;() {
        new() { Name = "Service1"},
        new() { Name = "Service2" }
    });


    public class MyBackgroundSrvConfig

    {
        public Guid Guid { get; } = Guid.NewGuid();
        public string? Name { get; set; }
    }


    public class MyBackgroundSrv : BackgroundService

    {
        private readonly MyBackgroundSrvConfig options;
        private readonly ILogger&lt;MyBackgroundService&gt; logger;

        public MyBackgroundSrv(ILogger&lt;MyBackgroundService&gt; logger, IHostedServicesCollectionConfig&lt;MyBackgroundSrvConfig&gt; options)
        {
            this.logger = logger; this.options = options.FetchNextConfig();
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    logger.LogInformation("MyBackgroundSrv running: {Name} with {guid} at {time}", options.Name, options.Guid.ToString(), DateTimeOffset.Now);
                    await Task.Delay(5000, stoppingToken);
                }
                catch (TaskCanceledException)
                {
                    logger.LogInformation("MyBackgroundSrv cancel: {Name} with {guid} at {time}", options.Name, options.Guid.ToString(), DateTimeOffset.Now);
                }
            }
        }
    }</code></pre>
  example: []
  syntax:
    content: 'public static IServiceCollection AddHostedServicesCollection<T, K>(this IServiceCollection services, List<K> values) where T : class, IHostedService where K : class, new()'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the services to.
    - id: values
      type: System.Collections.Generic.List{{K}}
      description: A list of configuration instances for the hosted services.
    typeParameters:
    - id: T
      description: The type of the hosted service to register. Must implement <xref href="Microsoft.Extensions.Hosting.IHostedService" data-throw-if-not-resolved="false"></xref>.
    - id: K
      description: The configuration type for the hosted service. Must be a class with a parameterless constructor.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The original <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> instance with the hosted services registered.
    content.vb: Public Shared Function AddHostedServicesCollection(Of T As {Class, IHostedService}, K As {Class, New})(services As IServiceCollection, values As List(Of K)) As IServiceCollection
  overload: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection*
  nameWithType.vb: ServiceCollectionExtensions.AddHostedServicesCollection(Of T, K)(IServiceCollection, List(Of K))
  fullName.vb: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection(Of T, K)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.List(Of K))
  name.vb: AddHostedServicesCollection(Of T, K)(IServiceCollection, List(Of K))
- uid: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``1[])
  commentId: M:Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``1[])
  id: AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,``1[])
  isExtensionMethod: true
  parent: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddHostedServicesCollection<T, K>(IServiceCollection, K[])
  nameWithType: ServiceCollectionExtensions.AddHostedServicesCollection<T, K>(IServiceCollection, K[])
  fullName: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection<T, K>(Microsoft.Extensions.DependencyInjection.IServiceCollection, K[])
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: AddHostedServicesCollection
    path: ../../src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
    startLine: 120
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.HostedServicesCollection
  summary: >-
    Registers a collection of hosted services of type <code class="typeparamref">T</code>

    with their configurations specified in an array of <code class="typeparamref">K</code>.
  remarks: >-
    Each hosted service instance is registered with a singleton service descriptor.

    <pre><code class="lang-csharp">services.AddHostedServicesCollection&lt;MyBackgroundSrv, MyBackgroundSrvConfig&gt;(new MyBackgroundSrvConfig[] {
        new() { Name = "Service1"},
        new() { Name = "Service2" }
    });

    public class MyBackgroundSrvConfig

    {
        public Guid Guid { get; } = Guid.NewGuid();
        public string? Name { get; set; }
    }


    public class MyBackgroundSrv : BackgroundService

    {
        private readonly MyBackgroundSrvConfig options;
        private readonly ILogger&lt;MyBackgroundService&gt; logger;

        public MyBackgroundSrv(ILogger&lt;MyBackgroundService&gt; logger, IHostedServicesCollectionConfig&lt;MyBackgroundSrvConfig&gt; options)
        {
            this.logger = logger; this.options = options.FetchNextConfig();
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    logger.LogInformation("MyBackgroundSrv running: {Name} with {guid} at {time}", options.Name, options.Guid.ToString(), DateTimeOffset.Now);
                    await Task.Delay(5000, stoppingToken);
                }
                catch (TaskCanceledException)
                {
                    logger.LogInformation("MyBackgroundSrv cancel: {Name} with {guid} at {time}", options.Name, options.Guid.ToString(), DateTimeOffset.Now);
                }
            }
        }
    }</code></pre>
  example: []
  syntax:
    content: 'public static IServiceCollection AddHostedServicesCollection<T, K>(this IServiceCollection services, K[] values) where T : class, IHostedService where K : class, new()'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the services to.
    - id: values
      type: '{K}[]'
      description: An array of configuration instances for the hosted services.
    typeParameters:
    - id: T
      description: The type of the hosted service to register. Must implement <xref href="Microsoft.Extensions.Hosting.IHostedService" data-throw-if-not-resolved="false"></xref>.
    - id: K
      description: The configuration type for the hosted service. Must be a class with a parameterless constructor.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The original <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> instance with the hosted services registered.
    content.vb: Public Shared Function AddHostedServicesCollection(Of T As {Class, IHostedService}, K As {Class, New})(services As IServiceCollection, values As K()) As IServiceCollection
  overload: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection*
  nameWithType.vb: ServiceCollectionExtensions.AddHostedServicesCollection(Of T, K)(IServiceCollection, K())
  fullName.vb: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection(Of T, K)(Microsoft.Extensions.DependencyInjection.IServiceCollection, K())
  name.vb: AddHostedServicesCollection(Of T, K)(IServiceCollection, K())
- uid: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)
  commentId: M:Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)
  id: AddHostedServicesCollection``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)
  isExtensionMethod: true
  parent: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddHostedServicesCollection<T, K>(IServiceCollection, IConfiguration, string)
  nameWithType: ServiceCollectionExtensions.AddHostedServicesCollection<T, K>(IServiceCollection, IConfiguration, string)
  fullName: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection<T, K>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, string)
  type: Method
  source:
    remote:
      path: src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/carsten-riedel/Coree.NETStandard
    id: AddHostedServicesCollection
    path: ../../src/Projects/Coree.NETStandard/HostedServicesCollection/ServiceCollectionExtensions.cs
    startLine: 193
  assemblies:
  - Coree.NETStandard
  namespace: Coree.NETStandard.HostedServicesCollection
  summary: >-
    Registers a collection of hosted services of type <code class="typeparamref">T</code>

    with their configurations loaded from a specified section of the application's <xref href="Microsoft.Extensions.Configuration.IConfiguration" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    Configurations are bound to new instances of <code class="typeparamref">K</code> and each hosted service

    instance is registered with a singleton service descriptor.

    <pre><code class="lang-csharp">//appsettings.json

    "ServiceConfigurations": {
        "FooService": {
          "Name": "Service1"
        },
        "BarService": {
          "Name": "Service2"
        }
    }


    services.AddHostedServicesCollection&lt;MyBackgroundSrv, MyBackgroundSrvConfig&gt;(context.Configuration, "ServiceConfigurations");


    public class MyBackgroundSrvConfig

    {
        public Guid Guid { get; } = Guid.NewGuid();  public string? Name { get; set; }
    }


    public class MyBackgroundSrv : BackgroundService

    {
        private readonly MyBackgroundSrvConfig options; private readonly ILogger&lt;MyBackgroundService&gt; logger;

        public MyBackgroundSrv(ILogger&lt;MyBackgroundService&gt; logger, IHostedServicesCollectionConfig&lt;MyBackgroundSrvConfig&gt; options)
        {
            this.logger = logger; this.options = options.FetchNextConfig();
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                try {
                    logger.LogInformation("MyBackgroundSrv running: {Name} with {guid} at {time}", options.Name, options.Guid.ToString(), DateTimeOffset.Now);
                    await Task.Delay(5000, stoppingToken);
                }
                catch (TaskCanceledException)
                { logger.LogInformation("MyBackgroundSrv cancel: {Name} with {guid} at {time}", options.Name, options.Guid.ToString(), DateTimeOffset.Now); }
            }
        }
    }</code></pre>
  example: []
  syntax:
    content: 'public static IServiceCollection AddHostedServicesCollection<T, K>(this IServiceCollection services, IConfiguration configuration, string sectionName) where T : class, IHostedService where K : class, new()'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the services to.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The application's configuration.
    - id: sectionName
      type: System.String
      description: The name of the configuration section from which to load the configurations.
    typeParameters:
    - id: T
      description: The type of the hosted service to register. Must implement <xref href="Microsoft.Extensions.Hosting.IHostedService" data-throw-if-not-resolved="false"></xref>.
    - id: K
      description: The configuration type for the hosted service. Must be a class with a parameterless constructor.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The original <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> instance with the hosted services registered.
    content.vb: Public Shared Function AddHostedServicesCollection(Of T As {Class, IHostedService}, K As {Class, New})(services As IServiceCollection, configuration As IConfiguration, sectionName As String) As IServiceCollection
  overload: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection*
  nameWithType.vb: ServiceCollectionExtensions.AddHostedServicesCollection(Of T, K)(IServiceCollection, IConfiguration, String)
  fullName.vb: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection(Of T, K)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, String)
  name.vb: AddHostedServicesCollection(Of T, K)(IServiceCollection, IConfiguration, String)
references:
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Coree.NETStandard.HostedServicesCollection
  commentId: N:Coree.NETStandard.HostedServicesCollection
  href: Coree.html
  name: Coree.NETStandard.HostedServicesCollection
  nameWithType: Coree.NETStandard.HostedServicesCollection
  fullName: Coree.NETStandard.HostedServicesCollection
  spec.csharp:
  - uid: Coree
    name: Coree
    href: Coree.html
  - name: .
  - uid: Coree.NETStandard
    name: NETStandard
    href: Coree.NETStandard.html
  - name: .
  - uid: Coree.NETStandard.HostedServicesCollection
    name: HostedServicesCollection
    href: Coree.NETStandard.HostedServicesCollection.html
  spec.vb:
  - uid: Coree
    name: Coree
    href: Coree.html
  - name: .
  - uid: Coree.NETStandard
    name: NETStandard
    href: Coree.NETStandard.html
  - name: .
  - uid: Coree.NETStandard.HostedServicesCollection
    name: HostedServicesCollection
    href: Coree.NETStandard.HostedServicesCollection.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting.IHostedService
  commentId: T:Microsoft.Extensions.Hosting.IHostedService
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting.ihostedservice
  name: IHostedService
  nameWithType: IHostedService
  fullName: Microsoft.Extensions.Hosting.IHostedService
- uid: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection*
  commentId: Overload:Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection
  href: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.html#Coree_NETStandard_HostedServicesCollection_ServiceCollectionExtensions_AddHostedServicesCollection__2_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Collections_Generic_List___1__
  name: AddHostedServicesCollection
  nameWithType: ServiceCollectionExtensions.AddHostedServicesCollection
  fullName: Coree.NETStandard.HostedServicesCollection.ServiceCollectionExtensions.AddHostedServicesCollection
- uid: System.Collections.Generic.List{{K}}
  commentId: T:System.Collections.Generic.List{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<K>
  nameWithType: List<K>
  fullName: System.Collections.Generic.List<K>
  nameWithType.vb: List(Of K)
  fullName.vb: System.Collections.Generic.List(Of K)
  name.vb: List(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: K
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: K
  - name: )
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Hosting
    name: Hosting
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Hosting
    name: Hosting
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.hosting
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: '{K}[]'
  isExternal: true
  name: K[]
  nameWithType: K[]
  fullName: K[]
  nameWithType.vb: K()
  fullName.vb: K()
  name.vb: K()
  spec.csharp:
  - name: K
  - name: '['
  - name: ']'
  spec.vb:
  - name: K
  - name: (
  - name: )
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration.iconfiguration
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration
